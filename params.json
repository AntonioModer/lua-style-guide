{"name":"Lua-style-guide","tagline":"Olivine Labs Lua Style Guide","body":"# Lua Style Guide\r\n\r\nThis style guide contains a list of guidelines that we try to follow for our\r\nprojects. It does not attempt to make arguments for the styles; its goal is\r\nto provide consistency across projects.\r\n\r\nFeel free to fork this style guide and change to your own\r\nliking, and file issues / pull requests if you have questions, comments, or if\r\nyou find any mistakes or typos.\r\n\r\n\r\n## <a name='TOC'>Table of Contents</a>\r\n\r\n  1. [Types](#types)\r\n  1. [Tables](#tables)\r\n  1. [Strings](#strings)\r\n  1. [Functions](#functions)\r\n  1. [Properties](#properties)\r\n  1. [Variables](#variables)\r\n  1. [Conditional Expressions & Equality](#conditionals)\r\n  1. [Blocks](#blocks)\r\n  1. [Whitespace](#whitespace)\r\n  1. [Commas](#commas)\r\n  1. [Semicolons](#semicolons)\r\n  1. [Type Casting & Coercion](#type-coercion)\r\n  1. [Naming Conventions](#naming-conventions)\r\n  1. [Accessors](#accessors)\r\n  1. [Constructors](#constructors)\r\n  1. [Modules](#modules)\r\n  1. [File Structure](#file-structure)\r\n  1. [Testing](#testing)\r\n  1. [Performance](#performance)\r\n  1. [Resources](#resources)\r\n  1. [In the Wild](#in-the-wild)\r\n  1. [Contributors](#contributors)\r\n  1. [License](#license)\r\n\r\n## <a name='types'>Types</a>\r\n\r\n  - **Primitives**: When you access a primitive type you work directly on its value\r\n\r\n    + `string`\r\n    + `number`\r\n    + `boolean`\r\n    + `nil`\r\n\r\n    ```lua\r\n    local foo = 1\r\n    local bar = foo\r\n\r\n    bar = 9\r\n\r\n    print(foo, bar) -- => 1\t9\r\n    ```\r\n\r\n  - **Complex**: When you access a complex type you work on a reference to its value\r\n\r\n    + `table`\r\n    + `function`\r\n    + `userdata`\r\n\r\n    ```lua\r\n    local foo = { 1, 2 }\r\n    local bar = foo\r\n\r\n    bar[0] = 9\r\n    foo[1] = 3\r\n\r\n    print(foo[0], bar[0]) -- => 9   9\r\n    print(foo[1], bar[1]) -- => 3   3\r\n    print(foo[2], bar[2]) -- => 2   2\t\t\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n## <a name='tables'>Tables</a>\r\n\r\n  - Use the constructor syntax for table property creation where possible.\r\n\r\n    ```lua\r\n    -- bad\r\n    local player = {}\r\n    player.name = 'Jack'\r\n    player.class = 'Rogue'\r\n\r\n    -- good\r\n    local player = {\r\n      name = 'Jack',\r\n      class = 'Rogue'\r\n    }\r\n    ```\r\n\r\n  - Define functions externally to table definition.\r\n\r\n    ```lua\r\n    -- bad\r\n    local player = {\r\n      attack = function() \r\n      -- ...stuff...\r\n      end\r\n    }\r\n\r\n    -- good\r\n    local function attack()\r\n    end\r\n\r\n    local player = {\r\n      attack = attack\r\n    }\r\n    ```\r\n\r\n  - Consider `nil` properties when selecting lengths.\r\n    A good idea is to store an `n` property on lists that contain the length\r\n    (as noted in [Storing Nils in Tables](http://lua-users.org/wiki/StoringNilsInTables))\r\n\r\n    ```lua\r\n    -- nils don't count\r\n    local list = {}\r\n    list[0] = nil\r\n    list[1] = 'item'\r\n\r\n    print(#list) -- 0\r\n    print(select('#', list)) -- 1\r\n    ```\r\n\r\n  - When tables have functions, use `self` when referring to itself.\r\n\r\n    ```lua\r\n    -- bad\r\n    local me = {\r\n      fullname = function(this)\r\n        return this.first_name + ' ' + this.last_name\r\n      end\r\n    }\r\n\r\n    -- good\r\n    local me = {\r\n      fullname = function(self)\r\n        return self.first_name + ' ' + self.last_name\r\n      end\r\n    }\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n## <a name='strings'>Strings</a>\r\n\r\n  - Use single quotes `''` for strings.\r\n\r\n    ```lua\r\n    -- bad\r\n    local name = \"Bob Parr\"\r\n\r\n    -- good\r\n    local name = 'Bob Parr'\r\n\r\n    -- bad\r\n    local fullName = \"Bob \" .. self.lastName\r\n\r\n    -- good\r\n    local fullName = 'Bob ' .. self.lastName\r\n    ```\r\n\r\n  - Strings longer than 80 characters should be written across multiple lines \r\n    using concatenation. This allows you to indent nicely.\r\n\r\n    ```lua\r\n    -- bad\r\n    local errorMessage = 'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'\r\n\r\n    -- bad\r\n    local errorMessage = 'This is a super long error that \\\r\n    was thrown because of Batman. \\\r\n    When you stop to think about \\\r\n    how Batman had anything to do \\\r\n    with this, you would get nowhere \\\r\n    fast.'\r\n\r\n\r\n    -- bad\r\n    local errorMessage = [[This is a super long error that\r\n      was thrown because of Batman.\r\n      When you stop to think about\r\n      how Batman had anything to do\r\n      with this, you would get nowhere\r\n      fast.]]\r\n\r\n    -- good\r\n    local errorMessage = 'This is a super long error that ' ..\r\n      'was thrown because of Batman. ' ..\r\n      'When you stop to think about ' ..\r\n      'how Batman had anything to do ' ..\r\n      'with this, you would get nowhere ' ..\r\n      'fast.'\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='functions'>Functions</a>\r\n  - Prefer lots of small functions to large, complex functions. [Smalls Functions Are Good For The Universe](http://kikito.github.io/blog/2012/03/16/small-functions-are-good-for-the-universe/).\r\n\r\n  - Prefer function syntax over variable syntax. This helps differentiate\r\n    between named and anonymous functions.\r\n\r\n    ```lua\r\n    -- bad\r\n    local nope = function(name, options)\r\n      -- ...stuff...\r\n    end\r\n\r\n    -- good\r\n    local function yup(name, options)\r\n      -- ...stuff...\r\n    end\r\n    ```\r\n\r\n  - Never name a parameter `arg`, this will take precendence over the `arg` object that is given to every function scope in older versions of Lua.\r\n\r\n    ```lua\r\n    -- bad\r\n    local function nope(name, options, arg) \r\n      -- ...stuff...\r\n    end\r\n\r\n    -- good\r\n    local function yup(name, options, ...)\r\n      -- ...stuff...\r\n    end\r\n    ```\r\n\r\n  - Perform validation early and return as early as possible.\r\n\r\n    ```lua\r\n    -- bad\r\n    local is_good_name = function(name, options, arg)\r\n      local is_good = #name > 3\r\n      is_good = is_good and #name < 30\r\n\r\n      -- ...stuff...\r\n\r\n      return is_bad\r\n    end\r\n\r\n    -- good\r\n    local is_good_name = function(name, options, args)\r\n      if #name < 3 or #name > 30 then return false end\r\n\r\n      -- ...stuff...\r\n\r\n      return true\r\n    end\r\n    ```\r\n\r\n  **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='properties'>Properties</a>\r\n\r\n  - Use dot notation when accessing known properties.\r\n\r\n    ```lua\r\n    local luke = {\r\n      jedi = true,\r\n      age = 28\r\n    }\r\n\r\n    -- bad\r\n    local isJedi = luke['jedi']\r\n\r\n    -- good\r\n    local isJedi = luke.jedi\r\n    ```\r\n\r\n  - Use subscript notation `[]` when accessing properties with a variable\r\n    or if using a table as a list.\r\n\r\n    ```lua\r\n    local luke = {\r\n      jedi = true,\r\n      age = 28\r\n    }\r\n\r\n    local function getProp(prop) \r\n      return luke[prop]\r\n    end\r\n\r\n    local isJedi = getProp('jedi')\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='variables'>Variables</a>\r\n\r\n  - Always use `local` to declare variables. Not doing so will result in\r\n    global variables to avoid polluting the global namespace.\r\n\r\n    ```lua\r\n    -- bad\r\n    superPower = SuperPower()\r\n\r\n    -- good\r\n    local superPower = SuperPower()\r\n    ```\r\n\r\n  - Assign variables at the top of their scope where possible. This makes it\r\n    easier to check for existing variables.\r\n\r\n    ```lua\r\n    -- bad\r\n    local bad = function()\r\n      test()\r\n      print('doing stuff..')\r\n\r\n      //..other stuff..\r\n\r\n      local name = getName()\r\n\r\n      if name == 'test' then\r\n        return false\r\n      end\r\n\r\n      return name\r\n    end\r\n\r\n    -- good\r\n    local function good()\r\n      local name = getName()\r\n\r\n      test()\r\n      print('doing stuff..')\r\n\r\n      //..other stuff..\r\n\r\n      if name == 'test' then\r\n        return false\r\n      end\r\n\r\n      return name\r\n    end\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='conditionals'>Conditional Expressions & Equality</a>\r\n\r\n  - False and nil are *falsy* in conditional expressions. All else is true.\r\n\r\n    ```lua\r\n    local str = ''\r\n\r\n    if str then\r\n      -- true\r\n    end\r\n    ```\r\n\r\n  - Use shortcuts when you can, unless you need to know the difference between\r\n    false and nil.\r\n\r\n    ```lua\r\n    -- bad\r\n    if name ~= nil then\r\n      -- ...stuff...\r\n    end\r\n\r\n    -- good\r\n    if name then\r\n      -- ...stuff...\r\n    end\r\n    ```\r\n\r\n  - Prefer *true* statements over *false* statements where it makes sense. \r\n    Prioritize truthy conditions when writing multiple conditions.\r\n\r\n    ```lua\r\n    --bad\r\n    if not thing then\r\n      -- ...stuff...\r\n    else\r\n      -- ...stuff...\r\n    end\r\n\r\n    --good\r\n    if thing then\r\n      -- ...stuff...\r\n    else\r\n      -- ...stuff...\r\n    end\r\n    ```\r\n\r\n  - Prefer defaults to `else` statements where it makes sense. This results in\r\n    less complex and safer code at the expense of variable reassignment, so\r\n    situations may differ.\r\n\r\n    ```lua\r\n    --bad\r\n    local function full_name(first, last)\r\n      local name\r\n\r\n      if first and last then\r\n        name = first .. ' ' .. last\r\n      else\r\n        name = 'John Smith'\r\n      end\r\n\r\n      return name\r\n    end\r\n\r\n    --good\r\n    local function full_name(first, last)\r\n      local name = 'John Smith'\r\n\r\n      if first and last then\r\n        name = first .. ' ' .. last\r\n      end\r\n\r\n      return name\r\n    end\r\n    ```\r\n\r\n  - Short ternaries are okay.\r\n\r\n    ```lua\r\n    local function default_name(name)\r\n      -- return the default 'Waldo' if name is nil\r\n      return name or 'Waldo'\r\n    end\r\n\r\n    local function brew_coffee(machine)\r\n      return machine and machine.is_loaded and 'coffee brewing' or 'fill your water'\r\n    end\r\n    ```\r\n\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='blocks'>Blocks</a>\r\n\r\n  - Single line blocks are okay for *small* statements. Try to keep lines to 80 characters.\r\n    Indent if lines they overflow past the limit.\r\n\r\n    ```lua\r\n    -- good\r\n    if test then return false end\r\n\r\n    -- good\r\n    if test then\r\n      return false\r\n    end\r\n\r\n    -- bad\r\n    if test < 1 and do_complicated_function(test) == false or seven == 8 and nine == 10 then do_other_complicated_function()end\r\n\r\n    -- good\r\n    if test < 1 and do_complicated_function(test) == false or\r\n        seven == 8 and nine == 10 then\r\n\r\n      do_other_complicated_function() \r\n      return false \r\n    end\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='whitespace'>Whitespace</a>\r\n\r\n  - Use soft tabs set to 2 spaces. Tab characters and 4-space tabs result in public flogging.\r\n\r\n    ```lua\r\n    -- bad\r\n    function() \r\n    ∙∙∙∙local name\r\n    end\r\n\r\n    -- bad\r\n    function() \r\n    ∙local name\r\n    end\r\n\r\n    -- good\r\n    function() \r\n    ∙∙local name\r\n    end\r\n    ```\r\n\r\n  - Place 1 space before opening and closing braces. Place no spaces around parens.\r\n\r\n    ```lua\r\n    -- bad\r\n    local test = {one=1}\r\n\r\n    -- good\r\n    local test = { one = 1 }\r\n\r\n    -- bad\r\n    dog.set('attr',{\r\n      age = '1 year',\r\n      breed = 'Bernese Mountain Dog'\r\n    })\r\n\r\n    -- good\r\n    dog.set('attr', {\r\n      age = '1 year',\r\n      breed = 'Bernese Mountain Dog'\r\n    })\r\n    ```\r\n\r\n  - Place an empty newline at the end of the file.\r\n\r\n    ```lua\r\n    -- bad\r\n    (function(global) \r\n      -- ...stuff...\r\n    end)(self)\r\n    ```\r\n\r\n    ```lua\r\n    -- good\r\n    (function(global) \r\n      -- ...stuff...\r\n    end)(self)\r\n\r\n    ```\r\n\r\n  - Surround operators with spaces.\r\n\r\n    ```lua\r\n    -- bad\r\n    local thing=1\r\n    thing = thing-1\r\n    thing = thing*1\r\n    thing = 'string'..'s'\r\n\r\n    -- good\r\n    local thing = 1\r\n    thing = thing - 1\r\n    thing = thing * 1\r\n    thing = 'string' .. 's'\r\n    ```\r\n\r\n  - Use one space after commas.\r\n\r\n    ```lua\r\n    --bad\r\n    local thing = {1,2,3}\r\n    thing = {1 , 2 , 3}\r\n    thing = {1 ,2 ,3}\r\n\r\n    --good\r\n    local thing = {1, 2, 3}\r\n    ```\r\n\r\n  - Add a line break after multiline blocks.\r\n\r\n    ```lua\r\n    --bad\r\n    if thing then\r\n      -- ...stuff...\r\n    end\r\n    function derp()\r\n      -- ...stuff...\r\n    end\r\n    local wat = 7\r\n\r\n    --good\r\n    if thing then\r\n      -- ...stuff...\r\n    end\r\n\r\n    function derp()\r\n      -- ...stuff...\r\n    end\r\n\r\n    local wat = 7\r\n    ```\r\n\r\n  - Delete unnecessary whitespace at the end of lines.\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n## <a name='commas'>Commas</a>\r\n\r\n  - Leading commas aren't okay. An ending comma on the last item is okay but discouraged.\r\n\r\n    ```lua\r\n    -- bad\r\n    local thing = {\r\n      once = 1\r\n    , upon = 2\r\n    , aTime = 3\r\n    }\r\n\r\n    -- good\r\n    local thing = {\r\n      once = 1,\r\n      upon = 2,\r\n      aTime = 3\r\n    }\r\n\r\n    -- okay\r\n    local thing = {\r\n      once = 1,\r\n      upon = 2,\r\n      aTime = 3,\r\n    }\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='semicolons'>Semicolons</a>\r\n\r\n  - **Nope.** Separate statements onto multiple lines.\r\n\r\n    ```lua\r\n    -- bad\r\n    local whatever = 'sure';\r\n    a = 1; b = 2\r\n\r\n    -- good\r\n    local whatever = 'sure'\r\n    a = 1\r\n    b = 2\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='type-coercion'>Type Casting & Coercion</a>\r\n\r\n  - Perform type coercion at the beginning of the statement. Use the built-in functions. (`tostring`, `tonumber`, etc.)\r\n\r\n  - Use `tostring` for strings if you need to cast without string concatenation.\r\n\r\n    ```lua\r\n    -- bad\r\n    local totalScore = reviewScore .. ''\r\n\r\n    -- good\r\n    local totalScore = tostring(reviewScore)\r\n    ```\r\n\r\n  - Use `tonumber` for Numbers.\r\n\r\n    ```lua\r\n    local inputValue = '4'\r\n\r\n    -- bad\r\n    local val = inputValue * 1\r\n\r\n    -- bad\r\n    local val = tonumber(inputValue)\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='naming-conventions'>Naming Conventions</a>\r\n\r\n  - Avoid single letter names. Be descriptive with your naming. You can get\r\n    away with single-letter names when they are variables in loops.\r\n\r\n    ```lua\r\n    -- bad\r\n    local function q() \r\n      -- ...stuff...\r\n    end\r\n\r\n    -- good\r\n    local function query() \r\n      -- ..stuff..\r\n    end\r\n    ```\r\n\r\n  - Use underscores for ignored variables in loops.\r\n\r\n    ```lua\r\n    --good\r\n    for _, name in pairs(names) do\r\n      -- ...stuff...\r\n    end\r\n    ```\r\n\r\n  - Use snake_case when naming objects, functions, and instances. Tend towards\r\n    verbosity if unsure about naming.\r\n\r\n    ```lua\r\n    -- bad\r\n    local OBJEcttsssss = {}\r\n    local thisIsMyObject = {}\r\n    local this-is-my-object = {}\r\n\r\n    local c = function()\r\n      -- ...stuff...\r\n    end\r\n\r\n    -- good\r\n    local this_is_my_object = {}\r\n\r\n    local function do_that_thing()\r\n      -- ...stuff...\r\n    end\r\n    ```\r\n\r\n  - Use PascalCase for factories.\r\n\r\n    ```lua\r\n    -- bad\r\n    local player = require('player')\r\n\r\n    -- good\r\n    local Player = require('player')\r\n    local me = Player({ name = 'Jack' })\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n  - Use `is` or `has` for boolean-returning functions that are part of tables.\r\n\r\n    ```lua\r\n    --bad\r\n    local function evil(alignment)\r\n      return alignment < 100\r\n    end\r\n\r\n    --good\r\n    local function is_evil(alignment)\r\n      return alignment < 100\r\n    end\r\n    ```\r\n\r\n## <a name='modules'>Modules</a>\r\n\r\n  - The module should return a table or function.\r\n  - The module should not use the global namespace for anything ever. The\r\n    module should be a closure.\r\n  - The file should be named like the module.\r\n\r\n    ```lua\r\n    -- thing.lua\r\n    local thing = { }\r\n\r\n    local meta = {\r\n      __call = function(self, key, vars)\r\n        print key\r\n      end\r\n    }\r\n\r\n\r\n    return setmetatable(thing, meta)\r\n    ```\r\n\r\n  - Note that modules are [loaded as singletons](http://lua-users.org/wiki/TheEssenceOfLoadingCode)\r\n    and therefore should usually be factories (a function returning a new instance of a table)\r\n    unless static (like utility libraries.)\r\n\r\n  **[[⬆]](#TOC)**\r\n\r\n## <a name='file-structrure'>File Structure</a>\r\n\r\n  - Files should be named in all lowercase.\r\n  - Lua files should be in a top-level `src` folder. The main library file should \r\n    be called `modulename.lua`.\r\n  - Rockspecs, license, readme, etc should be in the top level.\r\n  - Tests should be in a top-level spec folder.\r\n  - Executables should be in a top-level bin folder.\r\n  - Example:\r\n\r\n    ```\r\n    ./my_module\r\n      bin/\r\n        script.sh\r\n\r\n      spec/\r\n        my_module_spec.lua\r\n        some_file.lua\r\n\r\n      src/\r\n        my_module.lua\r\n        some_file.lua\r\n\r\n      README.md\r\n      LICENSE.md\r\n    ```\r\n\r\n## <a name='testing'>Testing</a>\r\n\r\n  - Use [busted](olivinelabs.com/busted) and write lots of tests in a /spec \r\n    folder. Separate tests by module.\r\n  - Use descriptive `describe` and `it` blocks so it's obvious to see what\r\n    precisely is failing.\r\n  - Test interfaces. Don't test private methods. If you need to test something\r\n    that is private, it probably shouldn't be private in the first place.\r\n  - Example:\r\n\r\n    ```\r\n    ./my_module\r\n      bin/\r\n        script.sh\r\n\r\n      spec/\r\n        my_module_spec.lua\r\n\r\n        util/\r\n          formatters_spec.lua\r\n\r\n      src/\r\n        my_module.lua\r\n\r\n        util/\r\n          formatters.lua\r\n\r\n      README.md\r\n      LICENSE.md\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n## <a name='contributors'>Contributors</a>\r\n\r\n  - [View contributors](https://github.com/Olivine-Labs/lua-style-guide/graphs/contributors)\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n## <a name='license'>License</a>\r\n\r\n  - Released under CC0 (Public Domain).\r\n    Information can be found at [http://creativecommons.org/publicdomain/zero/1.0/](http://creativecommons.org/publicdomain/zero/1.0/).\r\n\r\n**[[⬆]](#TOC)**\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}